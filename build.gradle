plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group 'com.kazurayam'
version '0.3.1'

ext {
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/kazurayam/inspectus")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/kazurayam/materialstore")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
    mavenLocal()
}

dependencies {
    implementation libs.ashot
    implementation libs.commons.csv
    implementation libs.httpclient
    implementation libs.jsoup
    implementation libs.materialstore
    implementation libs.slf4j.api
    testRuntimeOnly libs.slf4j.simple
    testImplementation libs.webdrivermanager
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// https://stackoverflow.com/questions/56796676/gradle-how-to-run-a-custom-task-with-a-custom-configuration
task testWithSelenium3(type: Test, dependsOn: test) {
    dependencies {
        implementation libs.selenium3
    }
    testClassesDirs = sourceSets.test.output.classesDirs
}

task testWithSelenium4(type: Test, dependsOn: test) {
    dependencies {
        implementation libs.selenium4
    }
    testClassesDirs = sourceSets.test.output.classesDirs
}

task testBoth(dependsOn: [testWithSelenium3, testWithSelenium4])

javadoc {
    options.encoding = 'UTF-8'
    options.locale = "en_US"
}

task copyJavadoc(type: Copy) {
    from 'build/docs/javadoc'
    into 'docs/api'
}

javadoc.finalizedBy copyJavadoc

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = project.group
                name = project.rootProject.name

                description = 'A collection of formulas to drive WebDriver'
                url = "https://kazurayam.github.io/${project.rootProject.name}/"

                from components.java
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org.licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kazurayam'
                        name = 'URAYAMA,kazuaki'
                        email = 'kazuaki.urayama@gmail.com'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}